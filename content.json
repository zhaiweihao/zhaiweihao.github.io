[{"title":"rocket源码顺序消息和事务消息","date":"2020-09-13T08:25:45.000Z","path":"2020/09/13/rocket源码顺序消息和事务消息/","excerpt":"rocket，起飞~~~","tags":[{"name":"rocket","slug":"rocket","permalink":"http://yoursite.com/tags/rocket/"}]},{"title":"rocket源码consumer端根据offset获取消息","date":"2020-08-28T11:44:15.000Z","path":"2020/08/28/rocket源码consumer端根据offset获取消息/","excerpt":"rocket，起飞~~~","tags":[{"name":"rocket","slug":"rocket","permalink":"http://yoursite.com/tags/rocket/"}]},{"title":"rocket源码解析","date":"2020-08-18T12:02:29.000Z","path":"2020/08/18/rocket源码解析/","excerpt":"rocket 起飞~~~","tags":[{"name":"rocket","slug":"rocket","permalink":"http://yoursite.com/tags/rocket/"}]},{"title":"rocket源码start","date":"2020-08-15T13:00:12.000Z","path":"2020/08/15/rocket源码start/","excerpt":"rocket 起飞~~","tags":[{"name":"rocket","slug":"rocket","permalink":"http://yoursite.com/tags/rocket/"}]},{"title":"强一致性分布式事务框架raincat","date":"2020-07-29T11:58:28.000Z","path":"2020/07/29/强一致性分布式事务框架raincat/","excerpt":"raincat项目地址","tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"}]},{"title":"java中的泛型擦除","date":"2020-07-09T12:30:30.000Z","path":"2020/07/09/java中的泛型擦除/","excerpt":"java并没有真正的泛型，它是在编译阶段使用了泛型擦除。","tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"}]},{"title":"redis单线程模型","date":"2020-07-09T11:28:33.000Z","path":"2020/07/09/redis单线程模型/","excerpt":"redis在初始的版本中使用的是单线程的方式，使用单线程配合I/O多路复用和事件驱动的方式来达成同步非阻塞的效果，性能也能达到10w的QPS。","tags":[{"name":"redis","slug":"redis","permalink":"http://yoursite.com/tags/redis/"}]},{"title":"dubbo源码start","date":"2020-07-08T14:40:07.000Z","path":"2020/07/08/dubbo源码start/","excerpt":"刚clone的dubbo源码看的一头雾水，对照着dubbo官网文档发现不是很难，对照着上面实现的简单rpc，能很快理解它的实现。","tags":[{"name":"dubbo","slug":"dubbo","permalink":"http://yoursite.com/tags/dubbo/"}]},{"title":"dubbo作者实现的极简rpc","date":"2020-07-08T14:31:22.000Z","path":"2020/07/08/dubbo作者实现的极简rpc/","excerpt":"参考作者多前年前的博客…","tags":[{"name":"dubbo","slug":"dubbo","permalink":"http://yoursite.com/tags/dubbo/"}]},{"title":"netty线程模型","date":"2020-07-08T13:20:19.000Z","path":"2020/07/08/netty线程模型/","excerpt":"参考 《netty in action》","tags":[{"name":"netty","slug":"netty","permalink":"http://yoursite.com/tags/netty/"}]},{"title":"阿里云服务器被黑事件后续","date":"2019-12-25T02:33:55.000Z","path":"2019/12/25/阿里云服务器被黑事件后续/","excerpt":"接上次的内容 经过上次的处理我还以为万事大吉了，后来发现自己还是太年轻。。。每天凌晨的短信和邮件还是准时到达，警报信息显示有进程和矿池通信。好吧，接着搞。","tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"}]},{"title":"记录一次阿里云服务器被黑事件","date":"2019-12-23T09:54:20.000Z","path":"2019/12/23/记录一次阿里云服务器被黑事件/","excerpt":"从昨天开始，陆续收到了阿里云的报警邮件和短信，说是访问恶意下载源和linux计划任务执行异常指令。由于服务器上并没什么很重要的东西，还有一些其他原因，一直拖到了今天才处理。中午发现ssh都连不上了，这才意识到问题的严重。在这里记录一下这次问题解决的流程还有需要注意的问题。","tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"}]},{"title":"比较经典的面试题上篇","date":"2019-12-11T09:11:01.000Z","path":"2019/12/11/比较经典的面试题上/","excerpt":"整理一些经典的题，这些题大部分出自牛客网，还有平时面试碰到的一些。这些题并不是很难，只是自认为比较有代表性，还很实用。","tags":[{"name":"面试","slug":"面试","permalink":"http://yoursite.com/tags/面试/"}]},{"title":"深入解读synchronized和ReentrantLock","date":"2019-12-01T15:36:37.000Z","path":"2019/12/01/深入解读synchronized和ReentrantLock/","excerpt":"故事起源于上次阿里电面的3个问题。问题1，jvm中线程分为哪些状态。问题2，在执行Thread.start()方法后，线程是不是马上运行。问题3，java中的synchronized和ReentrantLock有什么不同。当时我的回答不是很好，就不说了，面试之后，在网上搜了很多文章，对照着jdk源码(1.8)，发现这3个问题存在着一些联系，接下来，就从这3个问题入手，仔细解读一下线程，synchronized和ReentrantLock。","tags":[{"name":"并发","slug":"并发","permalink":"http://yoursite.com/tags/并发/"}]},{"title":"记录一次阿里的电话面试","date":"2019-11-25T02:50:16.000Z","path":"2019/11/25/记录一次阿里的电话面试/","excerpt":"最近把简历刷新了，然后于上个周六收到了蚂蚁金服的电话面试邀请，并定于周六晚上八点进行电话面试。早就听闻阿里面试流程复杂，一般是一次电面，两次现场技术面，最后一次是HR面，果然这次电面并没有问特别难的问题，都是很基础的问题，大的方面都问到了，细节展开的不是很多。面试官也很体贴，不会的问题并不会纠缠你很久，但是会的问题就会一层一层的向下问了。在这里记录一下这次电面的主要问题，若是有人看到也能提供个帮助。","tags":[{"name":"面试","slug":"面试","permalink":"http://yoursite.com/tags/面试/"}]},{"title":"彻底理解红黑树","date":"2019-11-21T07:13:01.000Z","path":"2019/11/21/彻底理解红黑树/","excerpt":"二叉查找树又名二叉排序树。它的左子树的节点都小于根节点，右子树的节点都大于根节点，且左右子树都为二叉排序树。查找时采用二分查找的方法，时间复杂度最小为O(lgn)。这种树存在一个问题，可能会造成单侧子树过高，极端情况下只有单侧子树，成为线性查找。因此就产生了基于二叉排序树的性能更高的树，红黑树就是其中一种。","tags":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"}]},{"title":"linux常用命令","date":"2019-11-08T05:34:45.000Z","path":"2019/11/08/linux常用命令/","excerpt":"总结一下常用到的Linux命令","tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"}]},{"title":"vue使用碰到的一些问题","date":"2019-10-18T09:34:43.000Z","path":"2019/10/18/vue使用碰到的一些问题/","excerpt":"vue-elem项目中的vue知识整理。","tags":[{"name":"vue css","slug":"vue-css","permalink":"http://yoursite.com/tags/vue-css/"}]},{"title":"html和css的一些总结","date":"2019-10-16T12:32:10.000Z","path":"2019/10/16/html和css的一些总结/","excerpt":"总结了一下vue-elem前端项目中的html和css的知识。","tags":[{"name":"html css","slug":"html-css","permalink":"http://yoursite.com/tags/html-css/"}]},{"title":"循环队列","date":"2019-10-02T10:06:07.000Z","path":"2019/10/02/循环队列/","excerpt":"","tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/数据结构/"}]},{"title":"递归","date":"2019-09-08T07:30:19.000Z","path":"2019/09/08/递归/","excerpt":"","tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/数据结构/"}]},{"title":"数据结构-线性表","date":"2019-09-08T05:09:30.000Z","path":"2019/09/08/数据结构-线性表/","excerpt":"总结一些数据结构的常见问题","tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/数据结构/"}]},{"title":"js闭包","date":"2019-09-02T11:23:44.000Z","path":"2019/09/02/js闭包/","excerpt":"js中的闭包问题","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"}]},{"title":"jdk源码相关","date":"2019-07-11T12:18:05.000Z","path":"2019/07/11/jdk源码相关/","excerpt":"jdk中有很多值得借鉴的代码模式。","tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"}]},{"title":"docker使用的问题","date":"2019-07-11T08:32:28.000Z","path":"2019/07/11/docker使用的问题/","excerpt":"","tags":[{"name":"服务器端","slug":"服务器端","permalink":"http://yoursite.com/tags/服务器端/"}]},{"title":"java中的ArrayList","date":"2019-07-09T13:53:46.000Z","path":"2019/07/09/java中的ArrayList/","excerpt":"ArrayList分析","tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"}]},{"title":"HashMap和HashTable","date":"2019-07-08T05:38:54.000Z","path":"2019/07/08/HashMap和HashTable/","excerpt":"jdk中的 HashMap和HashTable的一些理解。","tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"}]},{"title":"一些酷炫的展示","date":"2019-07-07T08:39:45.000Z","path":"2019/07/07/一些酷炫的展示/","excerpt":"","tags":[]},{"title":"java 中的代理","date":"2019-06-13T08:43:56.000Z","path":"2019/06/13/java-中的代理/","excerpt":"代理模式是一个经常使用到的设计模式，它为目标对象提供一种增强的访问方式。即通过代理对象访问目标对象，这样就可以在目标对象实现的基础上，扩展一些其他的功能。","tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"}]},{"title":"java和dotnet代码上的区别","date":"2019-06-08T05:15:46.000Z","path":"2019/06/08/java和dotnet代码上的区别/","excerpt":"由于工作之初用的c#，现在又在用java，因此总结一下两个语言在使用上的差别。","tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"}]},{"title":"java初始化","date":"2019-05-17T05:52:13.000Z","path":"2019/05/17/java初始化/","excerpt":"","tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"}]},{"title":"缓存相关","date":"2019-05-02T01:37:08.000Z","path":"2019/05/02/缓存相关/","excerpt":"缓存的一些了解","tags":[{"name":"操作系统","slug":"操作系统","permalink":"http://yoursite.com/tags/操作系统/"}]},{"title":"数学公式markdown","date":"2019-04-12T09:47:37.000Z","path":"2019/04/12/数学公式test/","excerpt":"","tags":[]},{"title":"RSA算法涉及的一些数论知识","date":"2019-04-10T09:51:02.000Z","path":"2019/04/10/RSA算法涉及的一些数论知识/","excerpt":"这篇记录的是学习RSA算法之前需要的一些数论知识，包括一些数学概念和推倒过程，来源有百度和个人博客。 在CSDN看到一篇讲解的很详细的RSA系列文章，准备做一些记录和整理。","tags":[{"name":"加密解密","slug":"加密解密","permalink":"http://yoursite.com/tags/加密解密/"}]},{"title":"netty超时重连设置","date":"2019-04-04T07:04:18.000Z","path":"2019/04/04/netty超时重连设置/","excerpt":"客户端与服务器端连接可以分为长连接和短连接。 长连接可以保证数据的实时性，多适用于点对点，连接数较少的场景。长连接会占用服务器端较多资源。 连接数较多时可以选择短连接，发送数据完成后关闭连接。 或者在服务器端设置连接的超时时间，客户端在一段时间不发送数据后，服务器端断开连接，在下一次客户端和服务器发送数据时重新连接。 netty中为我们提供了ReadTimeoutHandler(int timeOutSeconds)来做超时检查，这个Handler可以放在客户端和服务器端。","tags":[{"name":"netty","slug":"netty","permalink":"http://yoursite.com/tags/netty/"}]},{"title":"关于线程池的一些思考","date":"2019-04-02T06:10:23.000Z","path":"2019/04/02/关于线程池的一些思考/","excerpt":"昨天看了crossoverjie一篇关于线程罢工的文章，觉得很有意思，因此决定自己仔细看一下java线程池的实现，因此就有了这篇文章。","tags":[{"name":"线程池","slug":"线程池","permalink":"http://yoursite.com/tags/线程池/"}]},{"title":"Disruptor使用介绍","date":"2019-03-21T08:28:14.000Z","path":"2019/03/21/Disruptor使用介绍/","excerpt":"Disriptor 可以看做一个生产者-消费者模式的实现，因此使用时主要有以下几个步骤 创建RingBuffer或者Disruptor，作用类似消息队列 创建事件处理器，作用类似消费者 开启disruptor，作用类似进行监听 发布事件到RingBuffer，作用类似生产者","tags":[{"name":"并发设计","slug":"并发设计","permalink":"http://yoursite.com/tags/并发设计/"}]},{"title":"由Disruptor引发的思考","date":"2019-03-20T13:41:01.000Z","path":"2019/03/20/由Disruptor引发的思考/","excerpt":"Disruptor是一个线程间通信的内存消息组件，因高效低延迟而闻名(号称每秒钟处理600万订单)。它的内部实现有一些值得思考的地方，我们不仅要学习使用它，它的一些设计理念也有助于我们平时的编程。","tags":[{"name":"并发设计","slug":"并发设计","permalink":"http://yoursite.com/tags/并发设计/"}]},{"title":"线程间通信相关类的使用方法及场景","date":"2019-03-17T03:00:44.000Z","path":"2019/03/17/线程间通信相关类的使用方法及场景/","excerpt":"在处理线程之间通信时，我们可能用到一些JDK提供的类，这些类都在java.util.concurrent包下，常用到的有下面几个 CountDownLatchCountDownLatch可以实现这样的结果：一个线程的部分代码需要等待其他多个线程执行完成才能继续执行。(例如等待初始化操作完成)","tags":[{"name":"并发设计","slug":"并发设计","permalink":"http://yoursite.com/tags/并发设计/"}]},{"title":"在Yilia主题的博客主页隐藏特定的文章","date":"2019-03-16T05:09:31.000Z","path":"2019/03/16/在Yilia主题的博客主页隐藏特定的文章/","excerpt":"我们在写博客时，可能有些文章不想展示在主页，这时候我们可以这样做：","tags":[]},{"title":"内蒙古之旅","date":"2019-03-16T04:35:58.000Z","path":"2019/03/16/内蒙古之旅/","excerpt":"","tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"哲学家进餐问题","date":"2019-03-16T04:23:25.000Z","path":"2019/03/16/哲学家进餐问题/","excerpt":"","tags":[{"name":"算法相关","slug":"算法相关","permalink":"http://yoursite.com/tags/算法相关/"}]},{"title":"并发编程之CyclicBarrier","date":"2019-03-15T15:24:09.000Z","path":"2019/03/15/并发编程之CyclicBarrier/","excerpt":"今天复习java看到了CyclicBarrier，它是用来挂起当前线程，直至所有线程都到达barrier状态再同时执行后续任务。","tags":[{"name":"并发设计","slug":"并发设计","permalink":"http://yoursite.com/tags/并发设计/"}]},{"title":"MasterWorker模式的实现","date":"2019-03-13T13:37:20.000Z","path":"2019/03/13/MasterWorker模式的实现/","excerpt":"Master-Worker模式意为拆分任务，使用多个线程去执行任务，最后再汇总。类似MapReduce。这里做一个简单的java实现。","tags":[{"name":"并发设计","slug":"并发设计","permalink":"http://yoursite.com/tags/并发设计/"}]},{"title":"Future模式的实现","date":"2019-03-12T14:45:49.000Z","path":"2019/03/12/模式的实现/","excerpt":"自己动手实现Future模式，即异步懒加载。","tags":[{"name":"并发设计","slug":"并发设计","permalink":"http://yoursite.com/tags/并发设计/"}]},{"title":"7.面向对象的陷阱","date":"2019-03-09T04:31:13.000Z","path":"2019/03/09/面向对象的陷阱/","excerpt":"instance的使用问题instance运算符前面操作室的编译类型必须是如下三种情况： 与后面的类相同 是后面类的父类 是后面类的子类 (接口可以看做一种特殊的类)","tags":[{"name":"疯狂Java：突破程序员基本功的16课","slug":"疯狂Java：突破程序员基本功的16课","permalink":"http://yoursite.com/tags/疯狂Java：突破程序员基本功的16课/"}]},{"title":"6.流程控制陷阱","date":"2019-03-09T04:29:57.000Z","path":"2019/03/09/流程控制陷阱/","excerpt":"switchswitch 的case语句要记得加break switch表达式的类型只有：byte,short,int,char,Enum","tags":[{"name":"疯狂Java：突破程序员基本功的16课","slug":"疯狂Java：突破程序员基本功的16课","permalink":"http://yoursite.com/tags/疯狂Java：突破程序员基本功的16课/"}]},{"title":"5.表达式中的陷阱","date":"2019-03-05T14:08:29.000Z","path":"2019/03/05/表达式中的陷阱/","excerpt":"java创建对象的四种方式： new 创建 Class对象的newInstance方法调用构造器创建 反序列化IO流 java对象的clone方法","tags":[{"name":"疯狂Java：突破程序员基本功的16课","slug":"疯狂Java：突破程序员基本功的16课","permalink":"http://yoursite.com/tags/疯狂Java：突破程序员基本功的16课/"}]},{"title":"4.jvm内存回收","date":"2019-03-02T10:45:59.000Z","path":"2019/03/02/jvm内存回收/","excerpt":"对象的引用类型 强引用 直接new对象 软引用 使用SoftReference&lt;&gt;，在内存空间足够的情况直接GC不会回收。内存空间不够的情况会回收 弱引用 使用WeakReference&lt;&gt;，调用System.gc(); System.runFinalization();会进行回收 虚引用 PhantomReference主要用于跟踪对象被垃圾回收的状态，虚引用不能单独使用，必须和引用队列一起使用。虚引用在对象释放之前会将对应的虚引用添加到它关联的引用队列，这使得可以在对象被回收之前采取行动","tags":[{"name":"疯狂Java：突破程序员基本功的16课","slug":"疯狂Java：突破程序员基本功的16课","permalink":"http://yoursite.com/tags/疯狂Java：突破程序员基本功的16课/"}]},{"title":"奇思妙想软件篇","date":"2019-03-02T06:13:01.000Z","path":"2019/03/02/奇思妙想软件篇/","excerpt":"一些比较好玩的软件","tags":[]},{"title":"3.成员变量和内存控制","date":"2019-03-01T09:45:30.000Z","path":"2019/03/01/成员变量和内存控制/","excerpt":"类中的成员变量(field)可以分为类变量和实例变量。有static修饰的为类变量，没有static修饰的为实例变量。","tags":[{"name":"疯狂Java：突破程序员基本功的16课","slug":"疯狂Java：突破程序员基本功的16课","permalink":"http://yoursite.com/tags/疯狂Java：突破程序员基本功的16课/"}]},{"title":"2.常见的集合分析","date":"2019-02-27T13:40:47.000Z","path":"2019/02/27/常见的集合分析/","excerpt":"set 无序，集合元素不可重复 map 多个键值对组成的组合 HashSet底层使用的就是HashMap，因此HashMap的问题HashSet也会碰到","tags":[{"name":"疯狂Java：突破程序员基本功的16课","slug":"疯狂Java：突破程序员基本功的16课","permalink":"http://yoursite.com/tags/疯狂Java：突破程序员基本功的16课/"}]},{"title":"1.数组","date":"2019-02-12T02:30:32.000Z","path":"2019/02/12/java 数组/","excerpt":"java数组的初始化就是为数组对象的元素分配内存空间，并为每个数组元素指定初始值。 静态初始化 初始化时由程序员显示指定每个元素的初始值，由系统决定数组长度","tags":[{"name":"疯狂Java：突破程序员基本功的16课","slug":"疯狂Java：突破程序员基本功的16课","permalink":"http://yoursite.com/tags/疯狂Java：突破程序员基本功的16课/"}]},{"title":"推荐算法-协同过滤算法","date":"2018-10-17T06:52:33.000Z","path":"2018/10/17/协同过滤算法/","excerpt":"协同过滤算法(电影推荐，音乐推荐)区别于基于内容的推荐，基于内容的推荐需要为内容添加标签等元数据特征。协同过滤是根据用户对信息的偏爱发现信息的相关性，基于相关性进行推荐。 假设现在有1，2，3 三个用户，4个电影 A,B,C,D。默认每个用户看过电影后会对其打分，打分情况如下所示(空即为没有看过) 1用户 电影 评分 A 3 B 2 C D","tags":[]},{"title":"常见的几种排序","date":"2018-08-27T06:52:33.000Z","path":"2018/08/27/常见的几种排序/","excerpt":"快速排序 取数组第一个元素为k 开始l=0;h=length-1 h–获得比k小的值，交换两个元素 l++获得比k大的值，交换两个元素 h-1&lt;=l时结束一次排序 每次排序的结果是以k分为两部分，左边的数据全部比k小，右边的数据全部比k大 递归k两边的两个数组 跳出条件是分裂的数组只有一个数据 示例情况 6 5 4 3 2 1 第一次排序 1 5 4 3 2 6 第二次排序 1 5 4 3 2 6 第三次排序 1 2 4 3 5 6 第四次排序 1 2 4 3 5 6 第五次排序 1 2 3 4 5 6 第六次排序 1 2 3 4 5 6 时间复杂度为O(nlogn)","tags":[]},{"title":"centos配置java环境的问题","date":"2018-08-27T05:45:59.000Z","path":"2018/08/27/centos配置java环境的问题/","excerpt":"打开ssh服务 更改/etc/ssh/sshd_config(修改配置文件需要切换到root用户)，打开端口号等选项，打开PermitRootLogin选项，保存文件退出 开启sshd服务sudo service sshd start ps -e|grep sshd可查看是否开启sshd服务 安装jdk 可根据java官网提供的jdk.tar.gz文件的路径使用wget安装，类似下面语句 1wget --no-cookie --header \"Cookie: s_cc=true; oraclelicense=accept-securebackup-cookie; s_nr=1407131063040; gpw_e24=http://www.oracle.com/technetwork/java/javase/downloads/jdk10-downloads-4416644.html; s_sq=%5B%5BB%5D%5D\" http://download.oracle.com/otn-pub/java/jdk/10.0.1+10/fb4372174a714e6b8c52526dc134031e/jdk-10.0.1_linux-x64_bin.tar.gz centos中有自带的jdk为低版本，暂时没删除，不知道是否有问题","tags":[]},{"title":"SpringDemo项目中的技术","date":"2018-08-27T05:42:20.000Z","path":"2018/08/27/SpringDemo项目中的技术/","excerpt":"前言- 整理一下在SpringDemo中用到的组件，还有碰到的问题 SpringMvc mvc的控制在servlet.xml文件中 将servlet.xml添加到web.xml的servlet的dispatch中，相当于转发请求 interceptor的拦截配置 jsp文件所在位置 去掉静态文件的访问限制 mvc:resource配置 上传文件时添加multipartResolver bean 跨域的配置cors spring配置在applicationContext.xml文件中 将该配置添加到web.xml的context-param中 添加properties后要记得加到propertyConfigurer中 要注入的Component,Controller,Service,Dao所在的文件夹要加到component-scan中 controller中接收url,parameter和body中的参数，produce标识的是返回的类型 上传文件时，在request中接收file时根据getFile(name)，这个name要和form中fileinput的名称相同，若是不同会接收不着","tags":[]},{"title":"使用hexo和githubPage搭建博客","date":"2018-08-27T05:16:49.000Z","path":"2018/08/27/使用hexo和githubPage搭建博客/","excerpt":"安装hexo hexo基于node.js，使用npm 安装 npm install -g hexo安装为全局 跳转到指定的目录，hexo init blog创建博客的基础框架，这里的博客名为blog cd blog npm install hexo g生成部署文件 hexo s启动本地，查看localhost:4000","tags":[]},{"title":"Hello World","date":"2015-04-21T07:13:01.000Z","path":"2015/04/21/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start","tags":[]}]