[{"title":"Disruptor使用介绍","date":"2019-03-21T08:28:14.000Z","path":"2019/03/21/Disruptor使用介绍/","excerpt":"Disriptor 可以看做一个生产者-消费者模式的实现，因此使用时主要有以下几个步骤 创建RingBuffer或者Disruptor，作用类似消息队列 创建事件处理器，作用类似消费者 开启disruptor，作用类似进行监听 发布事件到RingBuffer，作用类似生产者","tags":[{"name":"并发设计","slug":"并发设计","permalink":"http://yoursite.com/tags/并发设计/"}]},{"title":"由Disruptor引发的思考","date":"2019-03-20T13:41:01.000Z","path":"2019/03/20/由Disruptor引发的思考/","excerpt":"Disruptor是一个线程间通信的内存消息组件，因高效低延迟而闻名(号称每秒钟处理600万订单)。它的内部实现有一些值得思考的地方，我们不仅要会用用它来设计架构，它的一些设计理念也有助于我们平时的编程。","tags":[{"name":"并发设计","slug":"并发设计","permalink":"http://yoursite.com/tags/并发设计/"}]},{"title":"线程间通信相关类的使用方法及场景","date":"2019-03-17T03:00:44.000Z","path":"2019/03/17/线程间通信相关类的使用方法及场景/","excerpt":"在处理线程之间通信时，我们可能用到一些JDK提供的类，这些类都在java.util.concurrent包下，常用到的有下面几个 CountDownLatchCountDownLatch可以实现这样的结果：一个线程的部分代码需要等待其他多个线程执行完成才能继续执行。(例如等待初始化操作完成)","tags":[{"name":"并发设计","slug":"并发设计","permalink":"http://yoursite.com/tags/并发设计/"}]},{"title":"在Yilia主题的博客主页隐藏特定的文章","date":"2019-03-16T05:09:31.000Z","path":"2019/03/16/在Yilia主题的博客主页隐藏特定的文章/","excerpt":"我们在写博客时，可能有些文章不想展示在主页，这时候我们可以这样做：","tags":[]},{"title":"内蒙古之旅","date":"2019-03-16T04:35:58.000Z","path":"2019/03/16/内蒙古之旅/","excerpt":"","tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"哲学家进餐问题","date":"2019-03-16T04:23:25.000Z","path":"2019/03/16/哲学家进餐问题/","excerpt":"","tags":[{"name":"算法相关","slug":"算法相关","permalink":"http://yoursite.com/tags/算法相关/"}]},{"title":"并发编程之CyclicBarrier","date":"2019-03-15T15:24:09.000Z","path":"2019/03/15/并发编程之CyclicBarrier/","excerpt":"今天复习java看到了CyclicBarrier，它是用来挂起当前线程，直至所有线程都到达barrier状态再同时执行后续任务。","tags":[{"name":"并发设计","slug":"并发设计","permalink":"http://yoursite.com/tags/并发设计/"}]},{"title":"MasterWorker模式的实现","date":"2019-03-13T13:37:20.000Z","path":"2019/03/13/MasterWorker模式的实现/","excerpt":"Master-Worker模式意为拆分任务，使用多个线程去执行任务，最后再汇总。类似MapReduce。这里做一个简单的java实现。","tags":[{"name":"并发设计","slug":"并发设计","permalink":"http://yoursite.com/tags/并发设计/"}]},{"title":"Future模式的实现","date":"2019-03-12T14:45:49.000Z","path":"2019/03/12/模式的实现/","excerpt":"自己动手实现Future模式，即异步懒加载。","tags":[{"name":"并发设计","slug":"并发设计","permalink":"http://yoursite.com/tags/并发设计/"}]},{"title":"7.面向对象的陷阱","date":"2019-03-09T04:31:13.000Z","path":"2019/03/09/面向对象的陷阱/","excerpt":"instance的使用问题instance运算符前面操作室的编译类型必须是如下三种情况： 与后面的类相同 是后面类的父类 是后面类的子类 (接口可以看做一种特殊的类)","tags":[{"name":"疯狂Java：突破程序员基本功的16课","slug":"疯狂Java：突破程序员基本功的16课","permalink":"http://yoursite.com/tags/疯狂Java：突破程序员基本功的16课/"}]},{"title":"6.流程控制陷阱","date":"2019-03-09T04:29:57.000Z","path":"2019/03/09/流程控制陷阱/","excerpt":"switchswitch 的case语句要记得加break switch表达式的类型只有：byte,short,int,char,Enum","tags":[{"name":"疯狂Java：突破程序员基本功的16课","slug":"疯狂Java：突破程序员基本功的16课","permalink":"http://yoursite.com/tags/疯狂Java：突破程序员基本功的16课/"}]},{"title":"5.表达式中的陷阱","date":"2019-03-05T14:08:29.000Z","path":"2019/03/05/表达式中的陷阱/","excerpt":"java创建对象的四种方式： new 创建 Class对象的newInstance方法调用构造器创建 反序列化IO流 java对象的clone方法","tags":[{"name":"疯狂Java：突破程序员基本功的16课","slug":"疯狂Java：突破程序员基本功的16课","permalink":"http://yoursite.com/tags/疯狂Java：突破程序员基本功的16课/"}]},{"title":"4.jvm内存回收","date":"2019-03-02T10:45:59.000Z","path":"2019/03/02/jvm内存回收/","excerpt":"对象的引用类型 强引用 直接new对象 软引用 使用SoftReference&lt;&gt;，在内存空间足够的情况直接GC不会回收。内存空间不够的情况会回收 弱引用 使用WeakReference&lt;&gt;，调用System.gc(); System.runFinalization();会进行回收 虚引用 PhantomReference主要用于跟踪对象被垃圾回收的状态，虚引用不能单独使用，必须和引用队列一起使用。虚引用在对象释放之前会将对应的虚引用添加到它关联的引用队列，这使得可以在对象被回收之前采取行动","tags":[{"name":"疯狂Java：突破程序员基本功的16课","slug":"疯狂Java：突破程序员基本功的16课","permalink":"http://yoursite.com/tags/疯狂Java：突破程序员基本功的16课/"}]},{"title":"3.成员变量和内存控制","date":"2019-03-01T09:45:30.000Z","path":"2019/03/01/成员变量和内存控制/","excerpt":"类中的成员变量(field)可以分为类变量和实例变量。有static修饰的为类变量，没有static修饰的为实例变量。","tags":[{"name":"疯狂Java：突破程序员基本功的16课","slug":"疯狂Java：突破程序员基本功的16课","permalink":"http://yoursite.com/tags/疯狂Java：突破程序员基本功的16课/"}]},{"title":"2.常见的集合分析","date":"2019-02-27T13:40:47.000Z","path":"2019/02/27/常见的集合分析/","excerpt":"set 无序，集合元素不可重复 map 多个键值对组成的组合 HashSet底层使用的就是HashMap，因此HashMap的问题HashSet也会碰到","tags":[{"name":"疯狂Java：突破程序员基本功的16课","slug":"疯狂Java：突破程序员基本功的16课","permalink":"http://yoursite.com/tags/疯狂Java：突破程序员基本功的16课/"}]},{"title":"1.数组","date":"2019-02-12T02:30:32.000Z","path":"2019/02/12/java 数组/","excerpt":"java数组的初始化就是为数组对象的元素分配内存空间，并为每个数组元素指定初始值。 静态初始化 初始化时由程序员显示指定每个元素的初始值，由系统决定数组长度","tags":[{"name":"疯狂Java：突破程序员基本功的16课","slug":"疯狂Java：突破程序员基本功的16课","permalink":"http://yoursite.com/tags/疯狂Java：突破程序员基本功的16课/"}]},{"title":"推荐算法-协同过滤算法","date":"2018-10-17T06:52:33.000Z","path":"2018/10/17/协同过滤算法/","excerpt":"协同过滤算法(电影推荐，音乐推荐)区别于基于内容的推荐，基于内容的推荐需要为内容添加标签等元数据特征。协同过滤是根据用户对信息的偏爱发现信息的相关性，基于相关性进行推荐。 假设现在有1，2，3 三个用户，4个电影 A,B,C,D。默认每个用户看过电影后会对其打分，打分情况如下所示(空即为没有看过) 1用户 电影 评分 A 3 B 2 C D","tags":[]},{"title":"常见的几种排序","date":"2018-08-27T06:52:33.000Z","path":"2018/08/27/常见的几种排序/","excerpt":"快速排序 取数组第一个元素为k 开始l=0;h=length-1 h–获得比k小的值，交换两个元素 l++获得比k大的值，交换两个元素 h-1&lt;=l时结束一次排序 每次排序的结果是以k分为两部分，左边的数据全部比k小，右边的数据全部比k大 递归k两边的两个数组 跳出条件是分裂的数组只有一个数据 示例情况 6 5 4 3 2 1 第一次排序 1 5 4 3 2 6 第二次排序 1 5 4 3 2 6 第三次排序 1 2 4 3 5 6 第四次排序 1 2 4 3 5 6 第五次排序 1 2 3 4 5 6 第六次排序 1 2 3 4 5 6 时间复杂度为O(nlogn)","tags":[]},{"title":"centos配置java环境的问题","date":"2018-08-27T05:45:59.000Z","path":"2018/08/27/centos配置java环境的问题/","excerpt":"打开ssh服务 更改/etc/ssh/sshd_config(修改配置文件需要切换到root用户)，打开端口号等选项，打开PermitRootLogin选项，保存文件退出 开启sshd服务sudo service sshd start ps -e|grep sshd可查看是否开启sshd服务 安装jdk 可根据java官网提供的jdk.tar.gz文件的路径使用wget安装，类似下面语句 1wget --no-cookie --header &quot;Cookie: s_cc=true; oraclelicense=accept-securebackup-cookie; s_nr=1407131063040; gpw_e24=http://www.oracle.com/technetwork/java/javase/downloads/jdk10-downloads-4416644.html; s_sq=%5B%5BB%5D%5D&quot; http://download.oracle.com/otn-pub/java/jdk/10.0.1+10/fb4372174a714e6b8c52526dc134031e/jdk-10.0.1_linux-x64_bin.tar.gz centos中有自带的jdk为低版本，暂时没删除，不知道是否有问题","tags":[]},{"title":"SpringDemo项目中的技术","date":"2018-08-27T05:42:20.000Z","path":"2018/08/27/SpringDemo项目中的技术/","excerpt":"前言- 整理一下在SpringDemo中用到的组件，还有碰到的问题 SpringMvc mvc的控制在servlet.xml文件中 将servlet.xml添加到web.xml的servlet的dispatch中，相当于转发请求 interceptor的拦截配置 jsp文件所在位置 去掉静态文件的访问限制 mvc:resource配置 上传文件时添加multipartResolver bean 跨域的配置cors spring配置在applicationContext.xml文件中 将该配置添加到web.xml的context-param中 添加properties后要记得加到propertyConfigurer中 要注入的Component,Controller,Service,Dao所在的文件夹要加到component-scan中 controller中接收url,parameter和body中的参数，produce标识的是返回的类型 上传文件时，在request中接收file时根据getFile(name)，这个name要和form中fileinput的名称相同，若是不同会接收不着","tags":[]},{"title":"使用hexo和githubPage搭建博客","date":"2018-08-27T05:16:49.000Z","path":"2018/08/27/使用hexo和githubPage搭建博客/","excerpt":"安装hexo hexo基于node.js，使用npm 安装 npm install -g hexo安装为全局 跳转到指定的目录，hexo init blog创建博客的基础框架，这里的博客名为blog cd blog npm install hexo g生成部署文件 hexo s启动本地，查看localhost:4000","tags":[]},{"title":"Hello World","date":"2018-08-14T06:09:50.829Z","path":"2018/08/14/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start","tags":[]}]